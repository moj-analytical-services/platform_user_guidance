[
["index.html", "Platform Guidance About this guidance", " Platform Guidance MoJ Analytical Services 2017-11-28 About this guidance Note that this guidance covers user interactions that are unique to the platform. We do not provide guidance on how to use off-the-shelf tools like R Studio and Git as high quality training materials are available online for free, and training and coaching is also provided within Analytical Services Directorate. Some online training recommendations are provided throughout. Platform is in early development The platform is being actively developed. We have given early access to the platform in order to receive feedback from the users. Please get in contact to tell us what you like, what you don’t like, and what doesn’t work. For bugs and problem reports, please raise a ticket via Github, here. For immediate support, contact us by email, or on the #analytical_platform Slack channel If you find any issues with the guidance, please report them here. "],
["quick-start.html", "Part 1 Quick Start 1.1 What is the Analytical Platform? 1.2 Why should I use the Analytical Platform? 1.3 FAQ: How do I?", " Part 1 Quick Start 1.1 What is the Analytical Platform? The Platform provides four main services to analysts: Accesss to analytical software. Data storage and access to datasets. The ability to create and share interactive data products and websites. Collaboration tools for analysts that enable teams to work concurrently on complex analytical projects, and perform QA incrementally. 1.1.1  Links to components of the Analytical Platform R Studio: Gives you access to R, a popular data analysis package. When using the platform, you’ll spend the bulk of your time in R Studio. Each user’s R Studio is provided at a personal URL, in the following format: https://YOUR_GITHUB_USERNAME-rstudio.tools.alpha.mojanalytics.xyz Amazon S3: Shared data storage for large data sets. You upload secure data to folders (in S3, these are called “buckets”), with no limit on storage space. Jenkins: Allows you to publish your data products such as R Shiny apps securely to your customers. Github: The central store of your work (your code). Allows you to share your code with others and collaborate on code projects together. 1.1.2  High level diagram of the platform: 1.2 Why should I use the Analytical Platform? The Platform provides a number of advantages over existing analytical infrastructure: It provides access to the latest versions of modern analytical software, such as R Studio, It provides more powerful computational resources (12Gb RAM and fast CPUs) than DOM1 machines. It can be accessed from multiple computer systems - DOM1, Quantum (HMPPS’s system), and Macbooks. It allows analysts to securely deploy data products such as R Shiny applications and web sites (including web-base data visualisations). The platform is hosted in the cloud, which means it is scalable. Data storage is unlimited, and computational resource can be scaled to demand. 1.3 FAQ: How do I? This section covers common tasks you may want to complete on the platform. If we’ve missed something then let us know. Get access to the platform See Getting Started. Share data or code with a team If you haven’t set up a team yet, see User Administration. If you’ve got a team but want to upload data see Uploading data to S3. If you want to share code see guidance on Github. Upload and work with data If the data isn’t shared and is &lt;100mb you can upload it directly to R Studio. See ‘uploading files’ here. If you want to share the data or if its &gt;100mb you’ll need to set up a team, then upload data see Uploading data to S3. To import data from S3 into R for analysis see Importing data from S3 into R. Make an interactive dashboard and deploy it securely See Deploying a Shiny App. "],
["getting-started.html", "Part 2 Getting Started 2.1 Getting an account 2.2 Accessing your platform instance 2.3 Configuring Git and Github for use on the Analytical Platform 2.4 Guidance on writing code 2.5 Training Resources", " Part 2 Getting Started This section will detail each step you need to go through to get setup on the platform. 2.1 Getting an account 2.1.1 Sign up for github In order to provide you with an account on the platform, we require your Github username. If you do not already have an account, head to https://github.com/ and sign up. When signing up, use all the default options. If you already have a personal Github account, it will be easiest to just use that. We recommend new users use their @justice email address, but note that it’s also fine for your account to be attached to a personal email address. 2.1.2 Enable two-factor authentication. Once you’ve signed to Github, you must enable two factor authentication to enhance security. You can do this in your Github settings page. You are given the option of doing this via SMS or an authentication app (such as Authy or Google Authenticator) - choose whichever you prefer. Please save a copy of your recovery codes e.g. by emailing them to your secure government email address. For step-by-step instructions see the Github guidance for authentication apps or SMS authentication. 2.1.3 Email us your Github username Once you’ve got a Github account setup, email your github username to Leanne Mills (or Robin Linacre if she’s out of office) who will create your Analytical Platform account. 2.1.4 Read the Security Operating Procedure Before you start using the platform, please read the Security Operating Procedures. 2.2 Accessing your platform instance The Analytical Platform team will email you when your platform account has been set up, with details of how to access you account. If you lose this information, you can access your platform account at a personalised link, dependent on your Github user name. For example, if your github username is moj1234 your platform will be available at https://moj1234-rstudio.tools.alpha.mojanalytics.xyz. 2.3 Configuring Git and Github for use on the Analytical Platform Github enables you to collaborate with colleagues on code and share you work with them. It puts your code in a centralised, searchable place. It also enables you to version control your work. If you are new to Git and Github it is worth clarifying the difference between Git and Github. Git is the software that looks after the version control of code, whereas Github is the website on which you publish and share your version controlled code. In practice this means that using Git to track versions of your code and then submit those changes to Github. This guide runs through how to set up connectivity between your Analytical Platform account and Github. This is a one-time set up procedure that you only need to do once when you first use the platform. This page covers only the initial setup. For guidance on how to use Git to sync your work with Github, please see the following guidance here or here. We have also published a suggested working pattern here. You can find more detailed notes about setting up Git with R Studio here and here 2.3.1 Instructions The steps are as follows: Create an ‘SSH key’ within the your platform R Studio. This is an unique code that will be stored in your account, meaning you will not need to enter your password when interacting with Github. Register the key with Github. Configure git to set you username and email address. 2.3.1.1 Step 1 - create an SSH key You can create your SSH key within the platform- Tools -&gt; Global options -&gt; Git/SVN -&gt; Create RSA key: You will be presented with dialog showing your key fingerprint, amongst other details. You do not need this information, therefore close the window: For the next step, you’ll need to copy and paste your SSH public key. You can copy this to the clipboard using the following dialogues: You can find more information about SSH keys in this guidance. 2.3.1.2 Step 2: Register the key with Github. The next step is to register your SSH public key with Github, using the interface on www.github.com. This guidance assumes you have copied your public key to your computer’s clipboard in the previous step. First, navigate to the Github homepage. If you are not logged in already, you will need to log in. Access your settings from the menu that appears when you click on your profile picture in the top right. Once in settings, access your SSH and GPG keys. Here’s a direct link. Click on ‘New SSH key’. Paste your key into the dialogue that pops up and click ‘Add SSH key’. You can choose any name you like for the ‘title’ of the key. The link with Github and the Analytical Platform is now established. You can now return to the analytical platform. Configure your Git name and email address within the analytical platform. To start syncing your work with Github, Git needs to know a bit more about you. Within the platform, access the shell using Tools -&gt; Shell… Then, you need to type the following commands (substitute your name and email): git config --global user.name &#39;Your Name&#39; git config --global user.email &#39;your@email.com&#39; You’re now ready to start using Github! 2.3.2 Git training resources If you are new to github we recommend that you complete the basic tutorial available here. Using Github with R Introductory interactive tutorial. Quickstart guide and cheatsheet here and in pdf format here. More in depth materials: Learn Git branching Git from the inside out 2.4 Guidance on writing code Please read the coding standards. 2.5 Training Resources The data science team maintain a list of R training here. "],
["working-with-big-datasets-and-sharing-them-accessing-data-in-amazon-s3.html", "Part 3 Working with big datasets and sharing them: Accessing data in Amazon S3 3.1 Importing data from S3 into R 3.2 Uploading data to S3", " Part 3 Working with big datasets and sharing them: Accessing data in Amazon S3 Amazon S3 is used as the primary storage area for large data files. In contrast to files in your personal home directory, files in S3 can be accessed by multiple Platform users. You will only be able to access buckets that you have been granted access to (see User Administration). 3.1 Importing data from S3 into R There are currently two methods of browsing and importing data held in S3 into RStudio. 3.1.1 User Interface We have developed a user interface that allows you to search and browse the files that you have been given access to. You can install the package as follows: install.packages(&quot;devtools&quot;) devtools::install_github(&quot;moj-analytical-services/s3browser&quot;) See the documentation for further details. 3.1.2 Command line tool We have also developed a command line tool that provides you with some helper function. This enables you to do things like write read_s3_csv to read directly from S3 into a data frame in R. You can install this package as follows: install.packages(&quot;devtools&quot;) devtools::install_github(&quot;moj-analytical-services/s3tools&quot;) See the documentation for further details. 3.2 Uploading data to S3 3.2.1 Where data is stored An S3 bucket is automatically created for every team; for how to create and manage teams see User Administration. By default, all members of the team have read and write access to the bucket. 3.2.2 Uploading data In Amazon S3 storage areas are refered to as ‘Buckets’. To access the buckets you need to visit the Amazon management console with the following link: https://alpha-analytics-moj.eu.auth0.com/samlp/NpfImg4P3ynU6HFx7ivYmqUZWQHfwi3Y (if you regularly upload data it may be worth bookmarking this link). Authentication is managed by GitHub, so if this is the first time you are connecting to the Amazon S3 Management console you may have to approve it. You’ll be able to see all buckets, including those you do not have access to. To upload data, find the bucket you want to upload data to. Within the bucket you can create folders and upload files by following the on screen instructions. When uploading files you will be prompted to set the settings for that file. If this happens, the default settings are okay. 3.2.2.1 Step-by-step instructions Use the following link to login Select the S3 service Select the bucket you wish to upload data to (the bucket will have the same name as the team, but spaces are replaced with - and all letters are lower case, so Test Team will have a bucket called test-team). While in alpha all buckets will also have the alpha prefix. You’ll notice two buckets are created; use the one prefixed alpha- and ignore the one prefixed dev-. The easiest way is to use the search: Use the interface to create folders or upload files. Note: The default settings are fine. 3.2.2.2 Manipulating data You can also move, rename and delete data using the S3 management console. Select the files by checking the text box, use the More button so see the options. "],
["deploying-a-shiny-app.html", "Part 4 Deploying a Shiny App 4.1 Step-by-step guide to deploying an app 4.2 Accessing the app 4.3 Access Levels 4.4 Advanced deployment", " Part 4 Deploying a Shiny App The following steps to deploy a Shiny app are as follows: Copy the template project within Github to a new repository, with a name of your choice. In R Studio, start a new project from version control (file -&gt; new project -&gt; version control -&gt; git). TODO: Remember to make sure the template has a Rproj that enables packrat Work on your Shiny app, using the template ui.R and server.R files. Ensure that your package dependencies are snapshotted using packrat::snapshot() When you’re ready to share it, access the Services control panel, find your app, and click ‘Build now’. Once deployed, grant users access to the app by inserting their names into the Grant user access control panel. Step-by-step instructions are below. For advanced users, the guidance here discusses customisability and options for deployment. Refer to this guidance if you are already familiar with git, packrat etc. 4.1 Step-by-step guide to deploying an app 4.1.1 Copy the template project into a new Github repository Begin by making a copy of the R Shiny template project on Github: https://github.com/new/import. Enter https://github.com/moj-analytical-services/rshiny-template in the input box entitled ‘your old repository’s clone URL:’ Ensure the ‘owner’ of the new repository is ‘moj-analytical-services’ and choose a name for your repository: Make sure the repo is ‘private’ (this should be the default value): Click ‘Begin import’ 4.1.2 In R Studio in the platform, create a new project from your new Github repository In R Studio, navigate through the following menus: File -&gt; New project -&gt; Version control -&gt; Git In ‘Repository URL’, enter the URL of the repository you just created. This needs to be the SSH URL (starting with git@github), NOT the HTTPS url (which starts with https). Therefore, it is in the following format: git@github.com:moj-analytical-services/your_name_goes_here.git R Studio will create a new project folder with all the template files in. You can now start building your Shiny app by editing server.R and ui.R files. 4.1.2.1 Further notes if you’re having trouble finding your new repo’s url If you navigate to your new repository’s home page (which will have a url in the form https://github.com/moj-analytical-services/your_name_goes_here), you can use the following buttons to access this url (make sure you click the ‘ssh’ button): 4.1.3 Work on your app You can now work on your Shiny app in R Studio as normal. As you work, commit your changes to Github using your chosen Github workflow. 4.1.4 Snapshot dependencies using packrat Your Shiny app will have dependencies on various third-party R packages (e.g. dplyr). These packages change through time, and sometimes these changes are not backwards compatible. When we deploy your Shiny app, it is therefore essential to include a manifest of all of the package dependencies and their specific versions. The R packagepackrat automates this process. Before deploying your app, you need to call packrat::snapshot() to automatically create this manifest. You may want to call packrat::clean() to remove any dependencies that are no longer in use. This creates a file called packrat/packrat.lock. You need to ensure you have committed this to the Github repository prior to deployment. 4.1.5 Scan organisation and deploy The platform automatically scans git repositories in the moj-analytical-services Github organisation to find repos that are ready to deploy. It does this by checking whether repositories contains two ‘magic’ files that control deployment: Jenkinsfile and Dockerfile. To deploy your app, go here. You will see a list of apps that have been detected. Find yours and click on the link with its name (if you’re app isnt listed then click “Scan Organisation Now” on the left hand menu and wait for the scan to complete. This step may take a few minutes.) Then click on the branch you wish to deploy (this will usually be ‘master’) Click ‘Build’. If this is the first time you’ve deployed the webpage it will be setup as a private page (only accessable to users with a given email). If you wish to grant access based on IP or make the website public you’ll need to build again: For the second build you be asked whether email authentication should be enabled (where you grant users access using their email address or if access is restricted based on network). For a ellaboration on this see Access levels. In the example below, I grant unrestricted access to the app. 4.1.6 Grant secure access to the app If you deployed with authentication enabled users are granted access to the app using a list of email addresses separated with a space, comma or semicolon. To grant access, complete the form here, and press ‘Build’. For example, your form might look like this: NOTE: Any characters which are not alphanumeric or dashes are converted into dashes. 4.2 Accessing the app Only users who you have granted access to will be able to access your app - the url for the app will be the respository-name followed by apps.alpha.mojanalytics.xyz. So for the example project above “test-shiny-project”, the deployment url will be https://test-shiny-project.apps.alpha.mojanalytics.xyz. Note that characters that are not compatible with website URLs are converted. So, repositories with underscores in their name (e.g. repository_name.apps...) will be converted to dashes for the URL (e.g. repository_name.apps...). Users will be prompted to enter their email and, if they are on the approved list, be sent a access link to view the app. 4.3 Access Levels When deploying a static website you’ll be asked for IP restrictions and whether authentication is required. IP restrictions restrict access the the static website based on the users network address. This can be useful if you want to make a site accessable to the organisation, without having to grant access on an email-by-email basis. The available levels are: DOM1 (excluding guest WiFi users but including those using AnyConnect) DOM1 and Quantum DOM1, Quantum and 102PF WiFi (including guest WiFi users) DOM1, Quantum, 102PF WiFi and Clive House WiFi (including guest WiFi users) Any location (this is a public website) The authentication tickbox determines whether or not users will have to be granted access via their email address. If you wish to enable this option visit the grant user access control panel, where you can enter a list of emails. For more info see the secure access documentation. 4.4 Advanced deployment This section contains guidance for advanced users on app deployment. 4.4.1 What is run when I deploy a Shiny app? When you deploy an app, the R Shiny server runs shiny::runApp() within the project. This is equivalent to when you press ‘run’ in a R Shiny project within R Studio. To understand how you can use this to deploy apps of different types, we can refer to the runApp docs. Specifically, the ‘arguments’ section is useful: Arguments appDir The application to run. Should be one of the following: A directory containing server.R, plus, either ui.R or a www directory that contains the file index.html. A directory containing app.R. An .R file containing a Shiny application, ending with an expression that produces a Shiny app object. A list with ui and server components. A Shiny app object created by shinyApp. One of those options is A directory containing app.R., which should contain: An .R file containing a Shiny application, ending with an expression that produces a Shiny app object.. This gives the developer a wider range of options of how to deploy a Shiny app, and makes it possible to deploy shiny apps that are bundled into pre-existing packages e.g. see here. 4.4.2 Can I change my build? Yes - if you know Docker, you are welcome to change the Dockerfile. 4.4.3 How can I troubleshoot problems? To view the logs, see the Kibana dashboard. If you’re still having problems, you can deploy the app locally using Docker. 4.4.4 Troubleshooting using Docker (installed locally on a Macbook) First cd into the directory containing the Dockerfile. Then run: docker build . -t your_name_here (your_name_here is the tag you want to give to the image) By building the image, it will test the installation of the packrat dependencies and package your shiny app into a Linux environment identical to what’s on the platform. Remember to refresh Docker if you are re-building a previously built app in the directory (the previous build will show when you view the app otherwise). Run the Shiny server in a linux container with docker run -p 80:80 your_name_here You can then go to http://127.0.0.1:80 to see if the app is working. If it is not, you can investigate what’s going on in the server using: docker run -it -p 80:80 your_name_here bash Install the nano text editor: apt-get update apt-get install nano Then edit the config file at nano /etc/shiny-server/shiny-server.conf to add the following two lines at the beginning: access_log /var/log/shiny-server/access.log tiny; preserve_logs true; Save by pressing [CTRL]+[O] and then exit with [CTRL]+[X]. Finally change the log level to be more verbose and start the shiny server: export SHINY_LOG_LEVEL=TRACE /bin/shiny-server.sh For further details see the rshiny-server documetation Now we need another terminal window, to get back into the docker container docker ps to find the name of the container and then docker exec -it container_name bash Logs are then written to cd /var/log/shiny-server/ 4.4.5 If all else fails… Sometimes, the following steps can resolve problems with packrat.lock: Delete the entire packrat directory Comment out all code in the project Enable packrat with packrat::init() Freeze packrat dependencies with packrat::snapshot() Uncomment all code in project, and install dependencies one at a time using install.packages() packrat::snapshot() again Try redeploying "],
["deploying-a-static-web-app.html", "Part 5 Deploying a Static Web App 5.1 Step-by-step guide to depolying an static web app 5.2 Accessing the app 5.3 Access Levels 5.4 Advanced deployment", " Part 5 Deploying a Static Web App The following steps to deploy a Shiny app are as follows: Copy the template project within Github to a new repository, with a name of your choice. In R Studio, start a new project from version control (file -&gt; new project -&gt; version control -&gt; git). TODO: Remember to make sure the template has a Rproj that enables packrat Work on your static website - the exposed content will be in the www/ directory and www/index.html will be the landing page. When you’re ready to share it, access the services control panel, find your app, and click ‘Build now’. This will prepare your site for deployment. Once the first deployment has completed, revisit the services control panel and deploy again. This time you will be prompted to select permission levels for the site (i.e. whether it should be available for DOM1, Quantum, or external). 5.1 Step-by-step guide to depolying an static web app 5.1.1 Copy the template project into a new Github repository Begin by making a copy of the R Shiny template project on Github: https://github.com/new/import Enter https://github.com/moj-analytical-services/webapp-template in the input box entitled ‘your old repository’s clone URL:’ Ensure the ‘owner’ of the new repository is ‘moj-analytical-services’ and choose a name for your repository: Make sure the repo is ‘private’ (this should be the default value): Click ‘Begin import’ 5.1.2 In your chosen development enviroment, clone the git repository You can find the clone link on the Github repository. To download a copy to start editing on your local machine, you need to ‘clone’ the repositry. If you’re using a shell: git clone git@github.com:moj-analytical-services/YOUR-REPO-NAME.git 5.1.2.1 Further notes if you’re having trouble finding your new repo’s url If you navigate to your new repository’s home page (which will have a url in the form https://github.com/moj-analytical-services/your_name_goes_here), you can use the following buttons to access this url (make sure you click the ‘ssh’ button): 5.1.3 Work on your web app Work on your web app using your chosen development enviroment. As you work, commit your changes to Github using your chosen Github workflow. 5.1.4 Scan organisation and deploy The platform automatically scans git repositories in the moj-analytical-services Github organisation to find repos that are ready to deploy. It does this by checking whether repositories contains two ‘magic’ files that control deployment: Jenkinsfile and Dockerfile. To deploy your app, go here. You will see a list of apps that have been detected. Find yours and click on the link with its name (if you’re app isnt listed then click “Scan Organisation Now” on the left hand menu and wait for the scan to complete. This step may take a few minutes.) Then click on the branch you wish to deploy (this will usually be ‘master’) Click ‘Build’. If this is the first time you’ve deployed the webpage it will be setup as a private page (only accessable to users with a given email). If you wish to grant access based on IP or make the website public you’ll need to build again: For the second build you be asked whether email authentication should be enabled (where you grant users access using their email address or if access is restricted based on network). For a ellaboration on this see Access levels. In the example below, I grant unrestricted access to the app. 5.2 Accessing the app Depending on the settings you selected, the website will either be available directly or authenticated via email. The URL for the app will be the respository-name followed by apps.alpha.mojanalytics.xyz. So for the example project above “static-web-deploy”, the deployment URL will be https://static-web-deploy.apps.alpha.mojanalytics.xyz. Note that characters that are not compatible with website URLs are converted. So, repositories with underscores in their name (e.g. repository_name.apps...) will be converted to dashes for the URL (e.g. repository_name.apps...). 5.3 Access Levels When deploying a static website you’ll be asked for IP restrictions and whether authentication is required. IP restrictions restrict access the the static website based on the users network address. This can be useful if you want to make a site accessable to the organisation, without having to grant access on an email-by-email basis. The available levels are: DOM1 (excluding guest WiFi users but including those using AnyConnect) DOM1 and Quantum DOM1, Quantum and 102PF WiFi (including guest WiFi users) DOM1, Quantum, 102PF WiFi and Clive House WiFi (including guest WiFi users) Any location (this is a public website) The authentication tickbox determines whether or not users will have to be granted access via their email address. If you wish to enable this option visit the grant user access control panel, where you can enter a list of emails. For more info see the secure access documentation. 5.4 Advanced deployment This section contains guidance for advanced users on app deployment. 5.4.1 Can I change my build? Yes - if you know Docker, you are welcome to change the Dockerfile. "],
["common-errors-and-sollutions.html", "Part 6 Common Errors and Sollutions 6.1 Failed to lock directory 6.2 Platform two factor authentication failing 6.3 Unable to access data using aws.s3 package. 6.4 s3tools::s3_path_to_full_df() fails on Excel file", " Part 6 Common Errors and Sollutions 6.1 Failed to lock directory This error is typically encountered after a failed package install. Error ERROR: failed to lock directory ‘/home/robinl/R/library’ for modifying Try removing ‘/home/robinl/R/library/00LOCK-readr’ Solution Run the following: install.packages(&#39;pacman&#39;) pacman::p_unlock() If that does not work, or if you have trouble installing the pacman package, try the following: Go to Tools -&gt; Shell and type: rm -rf /home/robinl/R/library/00LOCK-readr See here for more details. Be careful with the rm command! 6.2 Platform two factor authentication failing If the clock on your phone is inaccurate, then the two factor authentication codes it produces may be out of sync, and therefore not work. Solution Ensure that your phone’s clock is up to date. Most phones will sync time automatically with an internet time server, but if you don’t have internet access, you can update the clock manually. Try and make sure it’s in sync with your DOM1 clock. 6.3 Unable to access data using aws.s3 package. Unfortuntely aws.s3 does not support the granular file access permission model we are using on the platform. Specifically, it is unable to automatically provide the user with the right file access credentials. We provide s3tools as a solution to this problem, which manages your credentials for you. We recommend that, where possible, users should use s3tools. Where this is not possible, include a call to s3tools::get_credentials() prior to making the call to aws.s3, and this will guarantee that fresh credentials are generated before your call to aws.s3 6.4 s3tools::s3_path_to_full_df() fails on Excel file s3tools::s3_path_to_full_df attempts to read in data from various filetypes, including Excel, but this sometimes fails. If it does, you have two options: 6.4.0.1 Option 1: Use s3tools::read_using() This allows you to specify what function you want to use to attempt to read the file. So, for example you can do: s3tools::read_using(openxlsx::readWorkbook, path = &quot;alpha-everyone/my_excel.xlsx&quot;) to attempt to read the file alpha-everyone/my_excel.xlsx using openxlsx::readWorkbook 6.4.0.2 Option 2: Save the file to your project directory and load it from there, rather than from S3 s3tools::get_credentials() aws.s3::save_object(&quot;my_excel.xlsx&quot;, &quot;alpha-everyone&quot;, &quot;file_name_to_save_to_in_home_directory.xlsx&quot;) and then read it in using e.g. openxlsx::readWorkbook(&quot;file_name_to_save_to_in_home_directory.xlsx&quot;) Note, it’s best to avoid using aws.s3 directly, see here "],
["user-administration.html", "Part 7 User Administration 7.1 Teams and data access groups", " Part 7 User Administration 7.1 Teams and data access groups Users, teams and data access are all managed from Github Teams. Every team is automatically granted an S3 Bucket (a shared storage area). Teams and the associated S3 Bucket can be used in two ways: As as a shared area for a team. As “data access groups” where each member of the Github “team” is cleared to access a given dataset. For how to access buckets from within R see here. 7.1.1 Team creation See Githubs Guidence for a step-by-step guide on how to setup teams. A list of teams can be found here. 7.1.1.1 Team name When creating a team, make sure that the name of the team is clear, concise, and unique. Particularly as this will be the name of the folder where the associated data will be stored. Team names may contain spaces, but we recommend that you_use_underscores or you-use-dashes instead. Teams can either be teams or data access groups. If a bucket contains a core data set then it should be uploaded to a data access group and not a team shared storage area. In practise, individuals will probably be members of multiple teams and data access groups. Importantly, data access groups should be prefixed DAG_team_name. 7.1.1.2 Team visability Teams can be visable or secret. Visible teams can be viewed by all members of the organisation (those who are on Github but not on your team), whereas secret teams can only be viewed by members of that team. 7.1.1.3 Troubleshooting: I can’t create teams You will only be able to add team members that are part of the organisation. As part of the setup process users should already be added to the organisation. If they’re not then email Robin Linacre or Leanne Mills. 7.1.2 Adding or removing users from a team Step-by-step guidance on how to add or remove team members is available on Github. Note that when a user is added they are also authorised to access the data. Similarly, when they are removed, access to the data is revoked. 7.1.3 Team member permissions Members of a team can be Maintainers or Members. See the Github Guidance on how to set permissions for team members. Maintainers have the following additional permissions, and can be thought of as team administrators: Change the team’s name and description Change the team’s visibility Add organization members to the team Remove organization members from the team Promote an existing team member to team maintainer Remove the team’s access to repositories Reinstate a former organization member "],
["security-operating-procedures.html", "Part 8 Security Operating Procedures 8.1 General security guidance", " Part 8 Security Operating Procedures You must not put any sensitive (OFFICIAL) data into the platform without getting permission from Robin Linacre or get in contact on the #analytical-platform channel on Slack. The platform is still in Beta, which means we cannot guarantee its stability. Please do not use the platform for time-critical tasks. Specifically, you need to be prepared for the eventuality of downtime, which could last up to a week. If you are responsible for a team, ensure that users have the correct permissions. 8.1 General security guidance Do not access the platform from your personal (i.e. home) computer. Choose a complex password for your Github account that cannot be guessed. For further advice, see here You must not share your account with anyone else. "]
]
